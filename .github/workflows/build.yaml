on:
  workflow_call:
    inputs:
      runs-on_value:
        required: true
        type: string
      artifacts_version:
        required: true
        type: string
      catboost_package_name:
        required: false
        type: string
        default: catboost_dev
      catboost_package_version:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.runs-on_value }}
    env:
      CATBOOST_PACKAGE_NAME: ${{ inputs.catboost_package_name }}
      CATBOOST_PACKAGE_VERSION: ${{ inputs.catboost_package_version }}
      CMAKE_BUILD_CACHE_DIR: cmake_build_cache
    defaults:
      run:
        shell: bash
    steps:
      - if: inputs.runs-on_value == 'ubuntu-latest'
        name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 36000  # needed for docker image
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - if: inputs.runs-on_value == 'macos-13'
        name: Get python_3.7_macos_x86_64 from cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: python_3.7_macos_x86_64.zip
          key: python_3.7_macos_x86_64-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            python_3.7_macos_x86_64

      - if: inputs.runs-on_value == 'macos-13'
        name: Get python_versions_macos_arm64 from cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: python_versions_macos_arm64.zip
          key: python_versions_macos_arm64-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            python_versions_macos_arm64

      - if: inputs.runs-on_value == 'macos-13'
        name: Env setup on macOS
        run: |
          python3 -m pip install -U conan==1.62.0 setuptools wheel jupyterlab==3.0.6 build

          brew update
          brew install ninja

          npm install --global rimraf

          export CMAKE_BUILD_ENV_ROOT=${{ github.workspace }}/cmake_build_env_root

          mkdir -p $CMAKE_BUILD_ENV_ROOT/darwin-x86_64

          # JDK
          cd $CMAKE_BUILD_ENV_ROOT/darwin-x86_64
          mkdir -p Library/Java/JavaVirtualMachines
          cd Library/Java/JavaVirtualMachines
          ln -s /Library/Java/JavaVirtualMachines/Temurin-Hotspot-8.jdk ./jdk-8

          # Python
          mkdir -p $HOME/.pyenv/versions
          cd $HOME/.pyenv/versions
          unzip ${{ github.workspace }}/python_3.7_macos_x86_64.zip

          cd $CMAKE_BUILD_ENV_ROOT/darwin-x86_64
          mkdir -p Python
          cd Python
          ln -s $HOME/.pyenv/versions/3.7 ./3.7
          ln -s $RUNNER_TOOL_CACHE/Python/3.8.18/x64 ./3.8
          ln -s $RUNNER_TOOL_CACHE/Python/3.9.19/x64 ./3.9
          ln -s $RUNNER_TOOL_CACHE/Python/3.10.14/x64 ./3.10
          ln -s $RUNNER_TOOL_CACHE/Python/3.11.9/x64 ./3.11
          ln -s $RUNNER_TOOL_CACHE/Python/3.12.3/x64 ./3.12

          for PY_VER in 3.7 3.8 3.9 3.10 3.11 3.12
          do
              $CMAKE_BUILD_ENV_ROOT/darwin-x86_64/Python/$PY_VER/bin/python -m pip install --upgrade pip setuptools wheel
          done

          mkdir -p $CMAKE_BUILD_ENV_ROOT/darwin-arm64

          # JDK
          cd $CMAKE_BUILD_ENV_ROOT/darwin-arm64
          mkdir -p Library/Java/JavaVirtualMachines
          cd Library/Java/JavaVirtualMachines
          wget https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz
          tar xzvf zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz
          ln -s ./zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64/zulu-8.jdk ./jdk-8

          # Python
          cd $CMAKE_BUILD_ENV_ROOT/darwin-arm64
          mkdir -p Python
          cd Python
          unzip ${{ github.workspace }}/python_versions_macos_arm64

      - if: matrix.os == 'windows-2019'
        name: Install CUDA on Windows
        uses: Jimver/cuda-toolkit@v0.2.15
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
          method: 'network'
          sub-packages: '["nvcc","cudart"]'

      - if: inputs.runs-on_value == 'windows-2019'
        name: Env setup on Windows
        run: |
          python -m pip install -U conan==1.62.0 setuptools wheel jupyterlab==3.0.6 build

          choco install ninja

          npm install --global rimraf

          $CMAKE_BUILD_ENV_ROOT="${{ github.workspace }}\cmake_build_env_root"

          New-Item $CMAKE_BUILD_ENV_ROOT\windows-x86_64 -ItemType Directory

          # JDK
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path .\jdk-8 -ItemType SymbolicLink -Value $Env:JAVA_HOME_8_X64

          # Python
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path Python -ItemType Directory
          Set-Location -Path .\Python
          New-Item -Path .\3.7 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.7.9\x64"
          New-Item -Path .\3.8 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.8.10\x64"
          New-Item -Path .\3.9 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.9.13\x64"
          New-Item -Path .\3.10 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.10.11\x64"
          New-Item -Path .\3.11 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.11.9\x64"
          New-Item -Path .\3.12 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.12.3\x64"

          foreach($PY_VER in '3.7','3.8','3.9','3.10','3.11','3.12') {
            & "$CMAKE_BUILD_ENV_ROOT\windows-x86_64\Python\$PY_VER\python.exe" -m pip install --upgrade pip setuptools wheel
          }

          # CUDA
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path CUDA -ItemType Directory
          New-Item -Path .\CUDA\v11.8 -ItemType SymbolicLink -Value "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"

          # MSVC toolset
          $VS_DIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --installPath "$VS_DIR" --channelId VisualStudio.16.Release --add Microsoft.VisualStudio.Component.VC.14.28.16.9.x86.x64 --downloadThenInstall --quiet --norestart --nocache


      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: catboost

      - name: Update CMake build cache on every commit
        uses: actions/cache@v4
        with:
          path: cmake_build_cache.zip
          key: cmake_build_cache-${{ runner.os }}-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            cmake_build_cache-${{ runner.os }}

      - name: Uncompress cache
        shell: pwsh
        run: |
          if (Test-Path cmake_build_cache.zip) {
            Expand-Archive -Path cmake_build_cache.zip -DestinationPath cmake_build_cache
          } else {
            New-Item -Path cmake_build_cache -ItemType Directory
          }

      - name: Fixup python package version
        shell: pwsh
        run: |
          Set-Location -Path catboost
          python ./ci/fixup_python_version.py

      - if: inputs.runs-on_value == 'ubuntu-latest'
        name: Build all in container
        run: |
          mkdir -p ${{ github.workspace }}/catboost_build_home
          rm -fr ${{ github.workspace }}/catboost_build_home/*
          docker run --rm --name=catboost_build --user $(id -u):$(id -g) -v /etc/passwd:/etc/passwd -v ${{ github.workspace }}/catboost_build_home:$HOME -v ${{ github.workspace }}/catboost:/src/catboost -v ${{ github.workspace }}/$CMAKE_BUILD_CACHE_DIR:/cmake_build_cache -e CATBOOST_PACKAGE_NAME -e CATBOOST_PACKAGE_VERSION ghcr.io/catboost/manylinux2014_x86_64_and_cross_arm64_for_catboost_ci:latest bash -c ". /work/setup_env/build_x86_64.sh && export CMAKE_BUILD_CACHE_DIR=/cmake_build_cache/ && ln -sf /opt/cmake_build_env_root $HOME/ && rsync -rptl /opt/.conan $HOME/  && cd /src/catboost && ./ci/build_all.py"

      - if: inputs.runs-on_value != 'ubuntu-latest'
        name: Build all without container
        shell: pwsh
        run: |
          $Env:CMAKE_BUILD_ENV_ROOT = Join-Path ${{ github.workspace }} cmake_build_env_root
          $Env:CMAKE_BUILD_CACHE_DIR = Join-Path ${{ github.workspace }} cmake_build_cache
          Set-Location -Path catboost
          python ./ci/build_all.py

      - name: Compress cache
        shell: pwsh
        run: |
          if (Test-Path cmake_build_cache.zip) {
            Compress-Archive -Path cmake_build_cache/* -Update -DestinationPath cmake_build_cache.zip
          } else {
            Compress-Archive -Path cmake_build_cache/* -DestinationPath cmake_build_cache.zip
          }

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-cli-linux-x86_64-${{ inputs.arfifacts_version }}
      #  path: build_native_root/have_cuda/linux-x86_64/catboost/app/catboost

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-cli-linux-aarch64-${{ inputs.arfifacts_version }}
      #  path: build_native_root/have_cuda/linux-aarch64/catboost/app/catboost

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-python-package-dist-linux-${{ inputs.arfifacts_version }}
      #  path: catboost/python-package/dist/*.whl

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-python-package-dist-src-${{ inputs.arfifacts_version }}
      #  path: catboost/python-package/dist/*.tar.gz

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-R-package-linux-x86_64-${{ inputs.arfifacts_version }}
      #  path: catboost/R-package/catboost-R-linux-x86_64.tgz

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-R-package-linux-aarch64-${{ inputs.arfifacts_version }}
      #  path: catboost/R-package/catboost-R-linux-aarch64.tgz

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-model-interface-linux-x86_64-${{ inputs.arfifacts_version }}
      #  path: build_native_root/have_cuda/linux-x86_64/catboost/libs/model_interface/libcatboostmodel.*

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost-model-interface-linux-aarch64-${{ inputs.arfifacts_version }}
      #  path: build_native_root/have_cuda/linux-aarch64/catboost/libs/model_interface/libcatboostmodel.*

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost4j-spark_core_resources_classes-${{ inputs.arfifacts_version }}
      #  path: catboost/spark/catboost4j-spark/core/src/main/resources/ru

      #- uses: actions/upload-artifact@v4
      #with:
      #  name: catboost4j-prediction_resources-${{ inputs.arfifacts_version }}
      #  path: catboost/jvm-packages/catboost4j-prediction/src/main/resources/*
